name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on: [push]
jobs:
  build:
    name: My first job
    runs-on: ubuntu-latest
    strategy:
      matrix:
        jobs:
          - { goos: linux, goarch: amd64, goamd64: v3, output: amd64 }
          - { goos: windows, goarch: amd64, goamd64: v3, output: amd64 }

          - { goos: android, goarch: arm64, ndk: aarch64-linux-android34, output: arm64-v8 }

    steps:
      - name: checkout mihomo
        uses: actions/checkout@v4
        with:
          repository: MetaCubeX/mihomo
          ref: Alpha
          fetch-depth: 1
      
      - name: download project
        uses: actions/checkout@v4
        with:
          path: patchs
          
      - name: patch file
        run: git apply ./patchs/.github/patch/0001-http.patch
      - name: Set up Go
        if: ${{ matrix.jobs.goversion == '' && matrix.jobs.goarch != 'loong64' }}
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Setup NDK
        if: ${{ matrix.jobs.goos == 'android' }}
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r26c

      - name: Set NDK path
        if: ${{ matrix.jobs.goos == 'android' }}
        run: |
          echo "CC=${{steps.setup-ndk.outputs.ndk-path}}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{matrix.jobs.ndk}}-clang" >> $GITHUB_ENV
          echo "CGO_ENABLED=1" >> $GITHUB_ENV
          echo "BUILDTAG=" >> $GITHUB_ENV
      - name: Build core
        env:
          GOOS: ${{matrix.jobs.goos}}
          GOARCH: ${{matrix.jobs.goarch}}
          GOAMD64: ${{matrix.jobs.goamd64}}
          GOARM: ${{matrix.jobs.arm}}
          GOMIPS: ${{matrix.jobs.mips}}
        run: |
          echo $CGO_ENABLED
          go build -v -tags "with_gvisor" -trimpath -ldflags "${BUILDTAG} -X 'github.com/metacubex/mihomo/constant.Version=${VERSION}' -X 'github.com/metacubex/mihomo/constant.BuildTime=${BUILDTIME}' -w -s -buildid="
          if [ "${{matrix.jobs.goos}}" = "windows" ]; then
            cp mihomo.exe mihomo-${{matrix.jobs.goos}}-${{matrix.jobs.output}}.exe
            zip -r mihomo-${{matrix.jobs.goos}}-${{matrix.jobs.output}}-${VERSION}.zip mihomo-${{matrix.jobs.goos}}-${{matrix.jobs.output}}.exe
          else
            cp mihomo mihomo-${{matrix.jobs.goos}}-${{matrix.jobs.output}}
            gzip -c mihomo-${{matrix.jobs.goos}}-${{matrix.jobs.output}} > mihomo-${{matrix.jobs.goos}}-${{matrix.jobs.output}}-${VERSION}.gz
            rm mihomo-${{matrix.jobs.goos}}-${{matrix.jobs.output}}
          fi
      - name: Save version
        run: |
          echo ${VERSION} > version.txt
        shell: bash

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.jobs.goos }}-${{ matrix.jobs.output }}
          path: |
            mihomo*.gz
            mihomo*.deb
            mihomo*.rpm
            mihomo*.zip
            version.txt
            
  Upload-Prerelease:
    permissions: write-all
    if: ${{ github.ref_type == 'branch' && !startsWith(github.event_name, 'pull_request') }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v4
      with:
        path: bin/
        merge-multiple: true

    - name: Delete current release assets
      uses: 8Mi-Tech/delete-release-assets-action@main
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        tag: Prerelease-${{ github.ref_name }}
        deleteOnlyFromDrafts: false
    - name: Set Env
      run: |
        echo "BUILDTIME=$(TZ=Asia/Shanghai date)" >> $GITHUB_ENV
      shell: bash

    - name: Tag Repo
      uses: richardsimko/update-tag@v1
      with:
        tag_name: Prerelease-${{ github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - run: |
        cat > release.txt << 'EOF'
        Release created at  ${{ env.BUILDTIME }}
        Synchronize ${{ github.ref_name }} branch code updates, keeping only the latest version
        <br>
        [æˆ‘åº”è¯¥ä¸‹è½½å“ªä¸ªæ–‡ä»¶? / Which file should I download?](https://github.com/MetaCubeX/mihomo/wiki/FAQ)
        [äºŒè¿›åˆ¶æ–‡ä»¶ç­›é€‰ / Binary file selector](https://metacubex.github.io/Meta-Docs/startup/#_1)
        [æŸ¥çœ‹æ–‡æ¡£ / Docs](https://metacubex.github.io/Meta-Docs/)
        EOF

    - name: Upload Prerelease
      uses: softprops/action-gh-release@v1
      if: ${{  success() }}
      with:
        tag_name: Prerelease-${{ github.ref_name }}
        files: |
          bin/*
        prerelease: true
        generate_release_notes: true
        body_path: release.txt
